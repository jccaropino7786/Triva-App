{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = ({\n  currentUser,\n  setCurrentUser,\n  currentUserGame\n}) => {\n  _s();\n\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=3&categories=science,history'\");\n        const questionsList = await resp.json();\n        const questionResponse = await fetch('/questions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            questions: questionsList\n          })\n        });\n        const questionData = await questionResponse.json();\n        setQuestions(questionData); // create question, answer, and question-answer objects for each question\n        // for (const question of questionsList) {\n        //   try {\n        //     const questionResponse = await fetch('/questions', {\n        //       method: 'POST',\n        //       headers: {\n        //         'Content-Type': 'application/json',\n        //       },\n        //       body: JSON.stringify({ question_text: question.question }),\n        //     })\n        //     const questionData = await questionResponse.json()\n        //     const answerResponse = await fetch('/answers', {\n        //       method: 'POST',\n        //       headers: {\n        //         'Content-Type': 'application/json',\n        //       },\n        //       body: JSON.stringify({ answer_text: question.correctAnswer }),\n        //     })\n        //     const answerData = await answerResponse.json()\n        //     const questionAnswerResponse = await fetch('/question_answers', {\n        //       method: 'POST',\n        //       headers: {\n        //         'Content-Type': 'application/json',\n        //       },\n        //       body: JSON.stringify({ \n        //         question_id: questionData.id,\n        //         answer_id: answerData.id,\n        //         user_game_id: sessionStorage.getItem('user_game.id'),\n        //       }),\n        //     })\n        //     const questionAnswerData = await questionAnswerResponse.json()\n        //     console.log(questionData, answerData, questionAnswerData)\n        //   } catch (error) {\n        //     alert(error)\n        //       }\n        //     }\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    fetchData(); //for each question create question.question\n    //create question\n    //create answer for each create question.answer\n    //create question answer for each question for the current user attach the question and answer that was asked to the user\n  }, []);\n  console.log(questions);\n\n  const answerSubmitted = e => {\n    e.preventDefault(); // Increment the score\n\n    if (answer.toLowerCase() === questions[currentQuestion].answer.answer_text.toLowerCase()) {\n      setAnswer(\"\");\n      setScore(currentScore => currentScore + 1);\n    }\n\n    fetch(`/user_games/${currentUser.user_games[currentUser.user_games.length - 1].id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(score)\n    }).then(response => {\n      console.log(response);\n\n      if (response.status === 200) {\n        response.json().then(data => {\n          console.log(data); //update State\n        });\n      } else {\n        response.json().then(error => alert(error.errors));\n      }\n    }).catch(error => alert(error));\n\n    if (currentQuestion + 1 < 10) {\n      setCurrentQuestion(thisQuestion => thisQuestion + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 121,\n    columnNumber: 42\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"score\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 125,\n      columnNumber: 12\n    }, this), showResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Final Score\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 129,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [score, \" out of 9 correct\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 130,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 128,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Question: \", currentQuestion + 1, \" out of 9\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 137,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: questions[currentQuestion].question.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: answerSubmitted,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: answer,\n          onChange: e => setAnswer(e.target.value),\n          placeholder: \"Answer...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Final Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 141,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 135,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TriviaGame, \"eIXMMPkwGbq5g/29iLvMptMuklk=\");\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","TriviaGame","currentUser","setCurrentUser","currentUserGame","showResults","setShowResults","currentQuestion","setCurrentQuestion","score","setScore","questions","setQuestions","answer","setAnswer","fetchData","resp","fetch","questionsList","json","questionResponse","method","headers","body","JSON","stringify","questionData","error","alert","console","log","answerSubmitted","e","preventDefault","toLowerCase","answer_text","currentScore","user_games","length","id","then","response","status","data","errors","catch","thisQuestion","question","question_text","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TriviaGame = ({currentUser, setCurrentUser, currentUserGame}) => {\n\n    const [showResults, setShowResults] = useState(false);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [score, setScore] = useState(0);\n    const [questions, setQuestions] = useState([])\n    const [answer, setAnswer] = useState(\"\")\n\n    \n    \n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n              const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=3&categories=science,history'\")\n              const questionsList = await resp.json()\n              \n              const questionResponse = await fetch('/questions', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ questions: questionsList }),\n              })\n              const questionData = await questionResponse.json()\n              \n              setQuestions(questionData)\n              // create question, answer, and question-answer objects for each question\n              // for (const question of questionsList) {\n                //   try {\n              //     const questionResponse = await fetch('/questions', {\n              //       method: 'POST',\n              //       headers: {\n              //         'Content-Type': 'application/json',\n              //       },\n              //       body: JSON.stringify({ question_text: question.question }),\n              //     })\n              //     const questionData = await questionResponse.json()\n                  \n              //     const answerResponse = await fetch('/answers', {\n              //       method: 'POST',\n              //       headers: {\n              //         'Content-Type': 'application/json',\n              //       },\n              //       body: JSON.stringify({ answer_text: question.correctAnswer }),\n              //     })\n              //     const answerData = await answerResponse.json()\n                  \n              //     const questionAnswerResponse = await fetch('/question_answers', {\n              //       method: 'POST',\n              //       headers: {\n              //         'Content-Type': 'application/json',\n              //       },\n              //       body: JSON.stringify({ \n              //         question_id: questionData.id,\n              //         answer_id: answerData.id,\n              //         user_game_id: sessionStorage.getItem('user_game.id'),\n              //       }),\n              //     })\n              //     const questionAnswerData = await questionAnswerResponse.json()\n                  \n              //     console.log(questionData, answerData, questionAnswerData)\n              //   } catch (error) {\n              //     alert(error)\n          //       }\n          //     }\n            } catch (error) {\n              alert(error)\n            }\n          }\n        fetchData()\n        //for each question create question.question\n        //create question\n        //create answer for each create question.answer\n        //create question answer for each question for the current user attach the question and answer that was asked to the user\n        \n      },[])\n\n      console.log(questions)\n\n    \n\n      const answerSubmitted = (e) => {\n        e.preventDefault()\n        // Increment the score\n        if (answer.toLowerCase() === questions[currentQuestion].answer.answer_text.toLowerCase()) {\n          setAnswer(\"\")\n          setScore(currentScore => currentScore + 1);\n        }\n          \n          fetch(`/user_games/${currentUser.user_games[currentUser.user_games.length -1].id}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify( score )\n          })\n          .then(response => {\n            console.log(response)\n            \n            if (response.status === 200) {\n              response.json().then(data => {\n                console.log(data)\n                //update State\n              })\n            } else {\n              response.json().then(error => alert(error.errors))\n            }\n          })\n          .catch(error => alert(error));\n    \n        if (currentQuestion + 1 < 10) {\n          setCurrentQuestion(thisQuestion => thisQuestion + 1);\n        } else {\n          setShowResults(true);\n        }\n      };\n\n\n      if (questions.length === 0) return <h1>Loading...</h1>\n    return (\n        <div>\n           <h1>Trivia Game</h1>\n           <h2 className='score'>Score: {score}</h2>\n\n          {showResults? (\n            <div className=\"final-results\">\n               <h2>Final Score</h2>\n               <h2>\n               {score} out of 9 correct \n               </h2>\n             </div>\n             ) : (\n             <div className=\"question-card\">\n               \n               <h2>\n               Question: {currentQuestion + 1} out of 9\n               </h2>\n              <h3 className=\"question-text\">{questions[currentQuestion].question.question_text}</h3>\n                    <form onSubmit={answerSubmitted}>\n                        <input value={answer} onChange={(e)=>setAnswer(e.target.value)} placeholder='Answer...'></input>\n                        <button>Final Answer</button>\n                    </form>\n              \n               \n             </div>\n             )}\n           \n         </div>\n       );\n  }\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}