{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from '../context/UserContext';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = ({\n  setCurrentUser,\n  currentUserGame,\n  setCurrentUserGame\n}) => {\n  _s();\n\n  const {\n    user,\n    setUser\n  } = useContext(UserContext);\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState(\"\");\n  const navigate = useNavigate();\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=10&categories=science,history'\");\n        const questionsList = await resp.json();\n        const questionResponse = await fetch('/questions', {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            questions: questionsList\n          })\n        });\n        const questionData = await questionResponse.json();\n        setQuestions(questionData);\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    fetchData(); //for each question create question.question\n    //create question\n    //create answer for each create question.answer\n    //create question answer for each question for the current user attach the question and answer that was asked to the user\n  }, []);\n  console.log(questions);\n\n  const answerSubmitted = e => {\n    e.preventDefault(); // Increment the score\n\n    if (answer.toLowerCase() === questions[currentQuestion].answer.answer_text.toLowerCase()) {\n      setAnswer(\"\"); // debugger\n\n      fetch(`/user_games/${user.user_games[user.user_games.length - 1].id}`, {\n        method: 'PATCH',\n        headers: {\n          'Content-Type': 'application/json'\n        },\n        body: JSON.stringify({\n          score: score + 1\n        })\n      }).then(response => {\n        console.log(response);\n\n        if (response.status === 200) {\n          response.json().then(data => {\n            console.log(data);\n            setScore(currentScore => currentScore + 1);\n            setCurrentUser(currentUserObj => ({ ...currentUserObj,\n              user_games: currentUserObj.user_games.map(ug => ug.id === data.id ? data : ug)\n            }));\n            setCurrentUserGame(data);\n          });\n        } else {\n          response.json().then(error => alert(error.errors));\n        }\n      }).catch(error => alert(error));\n    }\n\n    if (currentQuestion < 9) {\n      setCurrentQuestion(thisQuestion => thisQuestion + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  if (!currentUserGame) {\n    navigate('/welcome');\n  }\n\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 92,\n    columnNumber: 42\n  }, this);\n  console.log(questions, currentQuestion);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"score\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 97,\n      columnNumber: 12\n    }, this), showResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Final Score\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [score, \" out of 10 correct\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 100,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Question: \", currentQuestion + 1, \" out of 10\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: questions[currentQuestion].question.question_text\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: answerSubmitted,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: answer,\n          onChange: e => setAnswer(e.target.value),\n          placeholder: \"Answer...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 114,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Final Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 115,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 107,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 95,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TriviaGame, \"dboSwJk4zkJ6SvZzs4JC/LsoCqA=\", false, function () {\n  return [useNavigate];\n});\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","useContext","useNavigate","UserContext","TriviaGame","setCurrentUser","currentUserGame","setCurrentUserGame","user","setUser","showResults","setShowResults","currentQuestion","setCurrentQuestion","score","setScore","questions","setQuestions","answer","setAnswer","navigate","fetchData","resp","fetch","questionsList","json","questionResponse","method","headers","body","JSON","stringify","questionData","error","alert","console","log","answerSubmitted","e","preventDefault","toLowerCase","answer_text","user_games","length","id","then","response","status","data","currentScore","currentUserObj","map","ug","errors","catch","thisQuestion","question","question_text","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect, useContext } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { UserContext } from '../context/UserContext';\n\nconst TriviaGame = ({ setCurrentUser, currentUserGame, setCurrentUserGame}) => {\n\n    const {user, setUser} = useContext(UserContext)\n\n    const [showResults, setShowResults] = useState(false);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [score, setScore] = useState(0);\n    const [questions, setQuestions] = useState([])\n    const [answer, setAnswer] = useState(\"\")\n\n    \n\n    const navigate = useNavigate()\n\n    \n    \n    useEffect(() => {\n        const fetchData = async () => {\n            try {\n              const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=10&categories=science,history'\")\n              const questionsList = await resp.json()\n              \n              const questionResponse = await fetch('/questions', {\n                method: 'POST',\n                headers: {\n                  'Content-Type': 'application/json',\n                },\n                body: JSON.stringify({ questions: questionsList }),\n              })\n              const questionData = await questionResponse.json()\n              \n              setQuestions(questionData)\n              \n            } catch (error) {\n              alert(error)\n            }\n          }\n        fetchData()\n        //for each question create question.question\n        //create question\n        //create answer for each create question.answer\n        //create question answer for each question for the current user attach the question and answer that was asked to the user\n        \n      },[])\n\n      console.log(questions)\n\n    \n\n      const answerSubmitted = (e) => {\n        e.preventDefault()\n        // Increment the score\n        if (answer.toLowerCase() === questions[currentQuestion].answer.answer_text.toLowerCase()) {\n          setAnswer(\"\")\n          // debugger\n          fetch(`/user_games/${user.user_games[user.user_games.length -1].id}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify( {score: score + 1} )\n          })\n          .then(response => {\n            console.log(response)\n            \n            if (response.status === 200) {\n              response.json().then(data => {\n                console.log(data)\n                setScore(currentScore => currentScore + 1);\n                setCurrentUser(currentUserObj => ({...currentUserObj, user_games: currentUserObj.user_games.map(ug => ug.id === data.id ? data : ug)}))\n                setCurrentUserGame(data)\n              })\n            } else {\n              response.json().then(error => alert(error.errors))\n            }\n          })\n          .catch(error => alert(error));\n        }\n    \n        if (currentQuestion < 9) {\n          setCurrentQuestion(thisQuestion => thisQuestion + 1);\n        } else {\n          setShowResults(true);\n        }\n      };\n\n      if(!currentUserGame){navigate('/welcome')}\n      if (questions.length === 0) return <h1>Loading...</h1>\n      console.log(questions, currentQuestion)\n    return (\n        <div>\n           <h1>Trivia Game</h1>\n           <h2 className='score'>Score: {score}</h2>\n\n          {showResults? (\n            <div className=\"final-results\">\n               <h2>Final Score</h2>\n               <h2>\n               {score} out of 10 correct \n               </h2>\n             </div>\n             ) : (\n             <div className=\"question-card\">\n               \n               <h2>\n               Question: {currentQuestion + 1} out of 10\n               </h2>\n              <h3 className=\"question-text\">{questions[currentQuestion].question.question_text}</h3>\n                    <form onSubmit={answerSubmitted}>\n                        <input value={answer} onChange={(e)=>setAnswer(e.target.value)} placeholder='Answer...'></input>\n                        <button>Final Answer</button>\n                    </form>\n              \n               \n             </div>\n             )}\n           \n         </div>\n       );\n  }\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}