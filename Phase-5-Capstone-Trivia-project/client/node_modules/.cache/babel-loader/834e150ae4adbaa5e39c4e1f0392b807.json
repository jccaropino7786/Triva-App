{"ast":null,"code":"var _jsxFileName = \"/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useEffect } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst TriviaGame = ({\n  currentUser,\n  setCurrentUser,\n  CurrentUserserGame\n}) => {\n  _s();\n\n  const [showResults, setShowResults] = useState(false);\n  const [currentQuestion, setCurrentQuestion] = useState(0);\n  const [score, setScore] = useState(0);\n  const [questions, setQuestions] = useState([]);\n  const [answer, setAnswer] = useState(\"\");\n  useEffect(() => {\n    const fetchData = async () => {\n      try {\n        // const resp = await fetch(\"https://opentdb.com/api.php?amount=2&type=multiple\")\n        const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=3&categories=science,history'\");\n        const questionsList = await resp.json(); // console.log(questionsList)\n\n        setQuestions(questionsList);\n      } catch (error) {\n        alert(error);\n      }\n    };\n\n    fetchData(); //create question\n    //create answer\n    //create question answer for each question\n  }, []);\n  console.log(questions);\n\n  const answerSubmitted = e => {\n    e.preventDefault(); // Increment the score\n\n    if (answer.toLowerCase() === questions[currentQuestion].correctAnswer.toLowerCase()) {\n      setAnswer(\"\");\n      setScore(currentScore => currentScore + 1);\n    }\n\n    fetch(`/user_games/${userGame.id}`, {\n      method: 'PATCH',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify(score)\n    }).then(response => {\n      console.log(response);\n\n      if (response.status === 200) {\n        response.json().then(data => {\n          console.log(data); //update State\n        });\n      } else {\n        response.json().then(error => alert(error.errors));\n      }\n    }).catch(error => alert(error));\n\n    if (currentQuestion + 1 < questions.length) {\n      setCurrentQuestion(thisQuestion => thisQuestion + 1);\n    } else {\n      setShowResults(true);\n    }\n  };\n\n  if (questions.length === 0) return /*#__PURE__*/_jsxDEV(\"h1\", {\n    children: \"Loading...\"\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 73,\n    columnNumber: 42\n  }, this);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n      children: \"Trivia Game\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 12\n    }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n      className: \"score\",\n      children: [\"Score: \", score]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 12\n    }, this), showResults ? /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"final-results\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Final Score\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [score, \" out of \", questions.length, \" correct\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 82,\n        columnNumber: 16\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 80,\n      columnNumber: 13\n    }, this) : /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"question-card\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: [\"Question: \", currentQuestion + 1, \" out of \", questions.length]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 16\n      }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n        className: \"question-text\",\n        children: questions[currentQuestion].question\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 15\n      }, this), /*#__PURE__*/_jsxDEV(\"form\", {\n        onSubmit: answerSubmitted,\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          value: answer,\n          onChange: e => setAnswer(e.target.value),\n          placeholder: \"Answer...\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 94,\n          columnNumber: 25\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          children: \"Final Answer\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 95,\n          columnNumber: 25\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 93,\n        columnNumber: 21\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 14\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 75,\n    columnNumber: 9\n  }, this);\n};\n\n_s(TriviaGame, \"eIXMMPkwGbq5g/29iLvMptMuklk=\");\n\n_c = TriviaGame;\nexport default TriviaGame;\n\nvar _c;\n\n$RefreshReg$(_c, \"TriviaGame\");","map":{"version":3,"sources":["/Users/johncaropino/Desktop/Capstone Phase 5/Phase-5-Capstone-Trivia/Phase-5-Capstone-Trivia-project/client/src/Components/TriviaGame.js"],"names":["React","useState","useEffect","TriviaGame","currentUser","setCurrentUser","CurrentUserserGame","showResults","setShowResults","currentQuestion","setCurrentQuestion","score","setScore","questions","setQuestions","answer","setAnswer","fetchData","resp","fetch","questionsList","json","error","alert","console","log","answerSubmitted","e","preventDefault","toLowerCase","correctAnswer","currentScore","userGame","id","method","headers","body","JSON","stringify","then","response","status","data","errors","catch","length","thisQuestion","question","target","value"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\n\nconst TriviaGame = ({currentUser, setCurrentUser, CurrentUserserGame}) => {\n\n    const [showResults, setShowResults] = useState(false);\n    const [currentQuestion, setCurrentQuestion] = useState(0);\n    const [score, setScore] = useState(0);\n    const [questions, setQuestions] = useState([])\n    const [answer, setAnswer] = useState(\"\")\n\n    \n    \n    useEffect(() => {\n        const fetchData = async () => {\n          try {\n            // const resp = await fetch(\"https://opentdb.com/api.php?amount=2&type=multiple\")\n            const resp = await fetch(\"https://the-trivia-api.com/api/questions?limit=3&categories=science,history'\")\n            const questionsList = await resp.json()\n            // console.log(questionsList)\n            setQuestions(questionsList)\n          } catch (error) {\n            alert(error)\n          }\n         }\n        fetchData()\n        //create question\n        //create answer\n        //create question answer for each question\n\n      },[])\n\n      console.log(questions)\n\n    \n\n      const answerSubmitted = (e) => {\n        e.preventDefault()\n        // Increment the score\n        if (answer.toLowerCase() === questions[currentQuestion].correctAnswer.toLowerCase()) {\n          setAnswer(\"\")\n          setScore(currentScore => currentScore + 1);\n        }\n\n        fetch(`/user_games/${userGame.id}`, {\n            method: 'PATCH',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify( score )\n          })\n            .then(response => {\n                console.log(response)\n              \n              if (response.status === 200) {\n                response.json().then(data => {\n                  console.log(data)\n                    //update State\n                })\n              } else {\n                response.json().then(error => alert(error.errors))\n              }\n            })\n            .catch(error => alert(error));\n    \n        if (currentQuestion + 1 < questions.length) {\n          setCurrentQuestion(thisQuestion => thisQuestion + 1);\n        } else {\n          setShowResults(true);\n        }\n      };\n\n\n      if (questions.length === 0) return <h1>Loading...</h1>\n    return (\n        <div>\n           <h1>Trivia Game</h1>\n           <h2 className='score'>Score: {score}</h2>\n\n          {showResults? (\n            <div className=\"final-results\">\n               <h2>Final Score</h2>\n               <h2>\n               {score} out of {questions.length} correct \n               </h2>\n             </div>\n             ) : (\n             <div className=\"question-card\">\n               \n               <h2>\n               Question: {currentQuestion + 1} out of {questions.length}\n               </h2>\n              <h3 className=\"question-text\">{questions[currentQuestion].question}</h3>\n                    <form onSubmit={answerSubmitted}>\n                        <input value={answer} onChange={(e)=>setAnswer(e.target.value)} placeholder='Answer...'></input>\n                        <button>Final Answer</button>\n                    </form>\n              \n               \n             </div>\n             )}\n           \n         </div>\n       );\n  }\n\nexport default TriviaGame;"]},"metadata":{},"sourceType":"module"}